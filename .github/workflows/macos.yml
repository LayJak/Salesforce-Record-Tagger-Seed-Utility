name: Build macOS DMG and Release

on:
  push:
    tags:
      - 'v*.*.*'        # push v1.0.3 etc. to publish
  workflow_dispatch:      # manual run also supported

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (pinned)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip
          # App deps + Pillow for icon generation
          pip install PySide6 pandas==2.2.2 numpy==1.26.4 Pillow
          # Build tooling
          pip install pyinstaller==6.7.0 pyinstaller-hooks-contrib>=2024.7

      - name: Generate .icns (Robust Method)
        shell: bash
        run: |
          # Use the reliable Pillow library instead of the flaky 'sips' command
          python -c "
          from PIL import Image
          import os

          source_image = 'icon.png'
          iconset_dir = 'icon.iconset'
          output_icon = 'icon.icns'
          os.makedirs(iconset_dir, exist_ok=True)

          img = Image.open(source_image)
          sizes = [16, 32, 64, 128, 256, 512]

          for size in sizes:
              img.resize((size, size), Image.Resampling.LANCZOS).save(os.path.join(iconset_dir, f'icon_{size}x{size}.png'))
              img.resize((size * 2, size * 2), Image.Resampling.LANCZOS).save(os.path.join(iconset_dir, f'icon_{size}x{size}@2x.png'))
          "
          # Use the standard macOS utility to convert the iconset folder to a .icns file
          iconutil -c icns icon.iconset -o icon.icns
          rm -rf icon.iconset
          echo "Generated icon.icns"


      - name: Build .app with PyInstaller (no --onefile)
        env:
          MACOSX_DEPLOYMENT_TARGET: "12.0"
        shell: bash
        run: |
          set -euo pipefail
          rm -rf build dist "SF Tagger.spec" || true

          # FIX: Corrected path for the icon flag
          ICON_FLAG=""
          [ -f "icon.icns" ] && ICON_FLAG="--icon icon.icns"

          # Exclude heavy/unneeded Qt modules
          EXCLUDES=(
            PySide6.Qt3DAnimation PySide6.Qt3DCore PySide6.Qt3DExtras PySide6.Qt3DInput PySide6.Qt3DLogic PySide6.Qt3DRender
            PySide6.QtWebEngineCore PySide6.QtWebEngineWidgets PySide6.QtWebEngineQuick
            PySide6.QtQuick PySide6.QtQuickWidgets PySide6.QtQuick3D PySide6.QtQuickControls2 PySide6.QtQuickTest
            PySide6.QtQml
            PySide6.QtBluetooth PySide6.QtCharts PySide6.QtDataVisualization PySide6.QtGraphs PySide6.QtGraphsWidgets
            PySide6.QtHelp PySide6.QtHttpServer PySide6.QtLocation PySide6.QtNfc PySide6.QtPositioning
            PySide6.QtMultimedia PySide6.QtMultimediaWidgets
            PySide6.QtNetworkAuth
            PySide6.QtOpenGL PySide6.QtOpenGLWidgets
            PySide6.QtPdf PySide6.QtPdfWidgets
            PySide6.QtRemoteObjects PySide6.QtScxml PySide6.QtSensors
            PySide6.QtSerialBus PySide6.QtSerialPort PySide6.QtSpatialAudio
            PySide6.QtStateMachine
            PySide6.QtSvg PySide6.QtSvgWidgets
            PySide6.QtTextToSpeech PySide6.QtTest
            PySide6.QtUiTools
            PySide6.QtWebChannel PySide6.QtWebSockets PySide6.QtWebView
            PySide6.QtXml
            PySide6.QtSql
            PySide6.scripts PySide6.scripts.deploy PySide6.scripts.deploy_lib PySide6.scripts.project PySide6.scripts.project_lib
          )
          EXCLUDE_FLAGS=""
          for m in "${EXCLUDES[@]}"; do
            EXCLUDE_FLAGS="$EXCLUDE_FLAGS --exclude-module $m"
          done

          pyinstaller Tagger.py \
            --name "SF Tagger" \
            --windowed \
            --noconfirm \
            $ICON_FLAG \
            $EXCLUDE_FLAGS \
            --collect-qt-plugins=platforms,imageformats,styles,tls \
            --collect-data pandas \
            --osx-bundle-identifier "com.northrop.sftagger" \
            --log-level=INFO

      - name: Create DMG
        shell: bash
        run: |
          set -euo pipefail
          brew install create-dmg || true
          DMG="SF_Tagger_macOS.dmg"
          VOL="SF Tagger"

          hdiutil detach "/Volumes/${VOL}" >/dev/null 2>&1 || true
          rm -f "$DMG"

          create-dmg --overwrite \
            --volname "${VOL}" \
            --window-pos 200 120 --window-size 600 400 \
            --icon-size 128 \
            --icon "SF Tagger.app" 160 200 \
            --app-drop-link 440 200 \
            "$DMG" "dist/SF Tagger.app"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: SF_Tagger_macOS
          path: SF_Tagger_macOS.dmg
          if-no-files-found: error

      - name: Create / Update GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: SF_Tagger_macOS.dmg
          body: |
            **SF Tagger – macOS**

            1) Open the DMG  
            2) Drag **SF Tagger.app** → **Applications** 3) First launch: right-click **SF Tagger.app** → **Open** → **Open** (unsigned; one-time Gatekeeper prompt)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
