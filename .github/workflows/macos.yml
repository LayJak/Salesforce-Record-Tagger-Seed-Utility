name: Build macOS DMG and Release

on:
  push:
    tags:
      - "v*.*.*"     # e.g. v1.0.7
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (pinned)
        shell: bash
        run: |
          set -e
          python -m pip install -U pip
          pip install PySide6==6.9.2 pandas==2.2.2 numpy==1.26.4
          pip install pyinstaller==6.8.0 pyinstaller-hooks-contrib Pillow

      - name: Generate .icns (optional)
        shell: bash
        run: |
          set -e
          if [ -f "assets/icon.png" ] && [ ! -f "assets/icon.icns" ]; then
            mkdir -p icon.iconset
            for s in 16 32 64 128 256 512; do
              sips -z "$s" "$s" assets/icon.png --out "icon.iconset/icon_${s}x${s}.png" >/dev/null
              sips -z "$((s*2))" "$((s*2))" assets/icon.png --out "icon.iconset/icon_${s}x${s}@2x.png" >/dev/null
            done
            iconutil -c icns icon.iconset -o assets/icon.icns
            rm -rf icon.iconset
          fi

      - name: Build .app with PyInstaller (bundle, not onefile)
        env:
          MACOSX_DEPLOYMENT_TARGET: "12.0"
        shell: bash
        run: |
          set -e
          rm -rf build dist "SF Tagger.spec" || true

          ICON_FLAG=""
          if [ -f "assets/icon.icns" ]; then
            ICON_FLAG='--icon assets/icon.icns'
          fi

          EXCLUDE_FLAGS="\
            --exclude-module PySide6.Qt3DAnimation \
            --exclude-module PySide6.Qt3DCore \
            --exclude-module PySide6.Qt3DExtras \
            --exclude-module PySide6.Qt3DInput \
            --exclude-module PySide6.Qt3DLogic \
            --exclude-module PySide6.Qt3DRender \
            --exclude-module PySide6.QtWebEngineCore \
            --exclude-module PySide6.QtWebEngineWidgets \
            --exclude-module PySide6.QtWebEngineQuick \
            --exclude-module PySide6.QtQuick3D \
            --exclude-module PySide6.QtQuickControls2 \
            --exclude-module PySide6.QtQuickTest \
            --exclude-module PySide6.QtCharts \
            --exclude-module PySide6.QtDataVisualization \
            --exclude-module PySide6.QtGraphs \
            --exclude-module PySide6.QtGraphsWidgets \
            --exclude-module PySide6.QtHelp \
            --exclude-module PySide6.QtHttpServer \
            --exclude-module PySide6.QtLocation \
            --exclude-module PySide6.QtNfc \
            --exclude-module PySide6.QtPositioning \
            --exclude-module PySide6.QtMultimedia \
            --exclude-module PySide6.QtMultimediaWidgets \
            --exclude-module PySide6.QtNetworkAuth \
            --exclude-module PySide6.QtOpenGL \
            --exclude-module PySide6.QtOpenGLWidgets \
            --exclude-module PySide6.QtPdf \
            --exclude-module PySide6.QtPdfWidgets \
            --exclude-module PySide6.QtRemoteObjects \
            --exclude-module PySide6.QtScxml \
            --exclude-module PySide6.QtSensors \
            --exclude-module PySide6.QtSerialBus \
            --exclude-module PySide6.QtSerialPort \
            --exclude-module PySide6.QtSpatialAudio \
            --exclude-module PySide6.QtStateMachine \
            --exclude-module PySide6.QtSvg \
            --exclude-module PySide6.QtSvgWidgets \
            --exclude-module PySide6.QtTextToSpeech \
            --exclude-module PySide6.QtTest \
            --exclude-module PySide6.QtUiTools \
            --exclude-module PySide6.QtWebChannel \
            --exclude-module PySide6.QtWebSockets \
            --exclude-module PySide6.QtWebView \
            --exclude-module PySide6.QtXml \
            --exclude-module PySide6.QtSql \
            --exclude-module PySide6.scripts \
            --exclude-module PySide6.scripts.deploy \
            --exclude-module PySide6.scripts.deploy_lib \
            --exclude-module PySide6.scripts.project \
            --exclude-module PySide6.scripts.project_lib \
          "

          PLUG_BASE="$(python -c 'import PySide6, os; print(os.path.join(PySide6.__path__[0], "Qt", "plugins"))')"

          ADD_DATA_ARGS=""
          for d in platforms imageformats styles tls; do
            if [ -d "${PLUG_BASE}/${d}" ]; then
              ADD_DATA_ARGS="${ADD_DATA_ARGS} --add-data ${PLUG_BASE}/${d}:PySide6/Qt/plugins/${d}"
            fi
          done

          pyinstaller Tagger.py \
            --name "SF Tagger" \
            --windowed \
            --noconfirm \
            ${ICON_FLAG} \
            ${EXCLUDE_FLAGS} \
            --collect-data pandas \
            --osx-bundle-identifier "com.northrop.sftagger" \
            --log-level=INFO \
            ${ADD_DATA_ARGS}

          echo "dist contents:" && ls -la "dist"
          [ -d "dist/SF Tagger.app" ] || (echo "❌ App bundle missing" && exit 1)

          # Ad-hoc sign so users can right-click → Open
          codesign --force --deep -s - "dist/SF Tagger.app" || true

      - name: Create DMG (no --overwrite)
        shell: bash
        run: |
          set -e
          brew install create-dmg || true
          DMG="SF_Tagger_macOS.dmg"
          VOL="SF Tagger"

          # Clean up any stale mounts / files
          hdiutil detach "/Volumes/${VOL}" >/dev/null 2>&1 || true
          rm -f "$DMG"

          if command -v create-dmg >/dev/null 2>&1; then
            create-dmg \
              --volname "${VOL}" \
              --window-pos 200 120 --window-size 600 400 \
              --icon-size 128 \
              --icon "SF Tagger.app" 160 200 \
              --app-drop-link 440 200 \
              "$DMG" "dist/SF Tagger.app"
          else
            hdiutil create -volname "${VOL}" -srcfolder "dist/SF Tagger.app" -ov -format UDZO "$DMG"
          fi

          ls -la "$DMG"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: SF_Tagger_macOS
          path: SF_Tagger_macOS.dmg
          if-no-files-found: error

      - name: Create / Update GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: SF_Tagger_macOS.dmg
          body: |
            **SF Tagger – macOS (Unsigned)**
            1) Open the DMG  
            2) Drag **SF Tagger.app** → **Applications**  
            3) First launch: right-click **SF Tagger.app** → **Open** → **Open** (one-time Gatekeeper prompt)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
