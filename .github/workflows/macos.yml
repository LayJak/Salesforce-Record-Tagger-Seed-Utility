name: macos-build-dmg-and-release

on:
  push:
    tags: ["v*.*.*"]            # e.g. v1.0.0, v1.0.1  -> auto-creates/updates a Release
  workflow_dispatch:            # manual run for test builds (no tag required)

permissions:
  contents: write               # needed to upload assets to Releases

jobs:
  build-universal-dmg:
    runs-on: macos-14           # Apple Silicon runner (can build universal2)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build deps
        run: |
          python -m pip install -U pip
          # Your app deps (safe defaults if file is missing)
          if [ -f requirements ]; then
            pip install -r requirements
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install PySide6 pandas
          fi
          # Pin a stable PyInstaller with universal2 support
          pip install "pyinstaller==6.7.0" "pyinstaller-hooks-contrib>=2024.7"

      # Optional: turn icon.png into icon.icns automatically (skip if you already committed .icns)
      - name: Generate .icns from icon.png (optional)
        run: |
          if [ -f "assets/icon.png" ] && [ ! -f "assets/icon.icns" ]; then
            mkdir -p icon.iconset
            for s in 16 32 64 128 256 512; do
              /usr/bin/sips -z $s $s assets/icon.png --out icon.iconset/icon_${s}x${s}.png >/dev/null
              /usr/bin/sips -z $((s*2)) $((s*2)) assets/icon.png --out icon.iconset/icon_${s}x${s}@2x.png >/dev/null
            done
            /usr/bin/iconutil -c icns icon.iconset -o assets/icon.icns
            rm -rf icon.iconset
          fi

      - name: Build app (universal2; bundle all Qt plugins to be safe)
        env:
          # Baseline so the app runs on Sequoia and back to Monterey
          MACOSX_DEPLOYMENT_TARGET: "12.0"
        run: |
          set -e
          ICON_FLAG=""
          [ -f "assets/icon.icns" ] && ICON_FLAG="--icon assets/icon.icns"

          # Collect-all PySide6 = includes platform plugins (cocoa), imageformats, tls, etc.
          # This makes the app larger but avoids “missing Qt platform plugin” issues.
          pyinstaller Tagger.py \
            --name "SF Tagger" \
            --windowed \
            --noconfirm \
            --target-arch universal2 \
            $ICON_FLAG \
            --collect-all PySide6 \
            --collect-data pandas

          echo "Built:"
          ls -la "dist/SF Tagger.app"

      - name: Create DMG
        run: |
          set -e
          brew install create-dmg || true

          DMG="dist/SF_Tagger-macos-universal.dmg"
          VOL="SF Tagger"

          # Clean previous mounts if any
          hdiutil detach "/Volumes/${VOL}" >/dev/null 2>&1 || true
          rm -f "$DMG"

          if command -v create-dmg >/dev/null 2>&1; then
            create-dmg --overwrite \
              --volname "${VOL}" \
              --window-pos 200 120 --window-size 600 400 \
              --icon-size 128 \
              --icon "SF Tagger.app" 160 200 \
              --app-drop-link 440 200 \
              "$DMG" "dist/SF Tagger.app"
          else
            # Fallback if create-dmg is unavailable
            hdiutil create -volname "${VOL}" -srcfolder "dist/SF Tagger.app" \
              -ov -format UDZO "$DMG"
          fi

          echo "DMG created:"
          ls -la "$DMG"

      - name: Upload artifact (for manual runs / debugging)
        uses: actions/upload-artifact@v4
        with:
          name: SF_Tagger-macos-universal
          path: dist/SF_Tagger-macos-universal.dmg

  release:
    if: startsWith(github.ref, 'refs/tags/v')   # only when a tag is pushed
    needs: build-universal-dmg
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact from build
        uses: actions/download-artifact@v4
        with:
          name: SF_Tagger-macos-universal
          path: artifacts

      - name: Create or update GitHub Release and upload DMG
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}              # e.g., v1.0.1
          name: SF Tagger ${{ github.ref_name }}
          body: |
            **SF Tagger – Bulk Salesforce Record Tagger**

            - macOS universal build (Apple Silicon & Intel)  
            - Unsigned (you’ll see “unidentified developer” on first run; choose **Open**).
            - Drag **SF Tagger.app** to Applications from the DMG.
          files: |
            artifacts/SF_Tagger-macos-universal.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
