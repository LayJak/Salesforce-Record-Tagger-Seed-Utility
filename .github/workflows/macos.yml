name: macos-build-dmg-unsigned

on:
  push:
    tags: ["v*.*.*"]   # e.g. v1.0.0
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        runner: [macos-14, macos-13]   # 14 = Apple Silicon (arm64), 13 = Intel (x86_64)
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          if [ -f requirements ]; then
            pip install -r requirements
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install PySide6 pandas
          fi
          # Pin a known-good PyInstaller
          pip install "pyinstaller==6.7.0"

      # Optional: build a .icns from PNG if you have assets/icon.png
      - name: Generate .icns (optional)
        run: |
          if [ -f "assets/icon.png" ]; then
            mkdir -p icon.iconset
            for s in 16 32 64 128 256 512; do
              /usr/bin/sips -z $s $s assets/icon.png --out icon.iconset/icon_${s}x${s}.png > /dev/null
              /usr/bin/sips -z $((s*2)) $((s*2)) assets/icon.png --out icon.iconset/icon_${s}x${s}@2x.png > /dev/null
            done
            /usr/bin/iconutil -c icns icon.iconset -o assets/icon.icns
            rm -rf icon.iconset
          fi

      - name: Build .app with PyInstaller (exclude heavy/unused Qt modules)
        run: |
          ICON_FLAG=""
          if [ -f "assets/icon.icns" ]; then ICON_FLAG="--icon assets/icon.icns"; fi

          # Exclude modules that drag in giant Qt frameworks (Qt3D, WebEngine, etc.)
          EXCLUDES=(
            PySide6.Qt3DAnimation PySide6.Qt3DCore PySide6.Qt3DRender PySide6.Qt3DExtras PySide6.Qt3DInput PySide6.Qt3DLogic
            PySide6.QtWebEngineCore PySide6.QtWebEngineWidgets PySide6.QtWebEngineQuick
            PySide6.QtQuick PySide6.QtQuickWidgets PySide6.QtQuick3D PySide6.QtQuickControls2 PySide6.QtQuickTest
            PySide6.QtBluetooth PySide6.QtCharts PySide6.QtDataVisualization PySide6.QtGraphs PySide6.QtGraphsWidgets
            PySide6.QtHelp PySide6.QtHttpServer PySide6.QtLocation PySide6.QtNfc PySide6.QtPositioning
            PySide6.QtPdf PySide6.QtPdfWidgets PySide6.QtRemoteObjects PySide6.QtScxml PySide6.QtSensors
            PySide6.QtSerialBus PySide6.QtSerialPort PySide6.QtSpatialAudio PySide6.QtStateMachine
            PySide6.QtSvg PySide6.QtSvgWidgets PySide6.QtTextToSpeech PySide6.QtUiTools
            PySide6.QtWebSockets PySide6.QtWebView
            PySide6.scripts PySide6.scripts.deploy PySide6.scripts.deploy_lib PySide6.scripts.project PySide6.scripts.project_lib
            PySide6.QtDBus PySide6.QtSql    # drops SQL drivers (also removes libqsql* warnings)
            jinja2
          )
          EXCLUDE_FLAGS=""
          for m in "${EXCLUDES[@]}"; do
            EXCLUDE_FLAGS="$EXCLUDE_FLAGS --exclude-module $m"
          done

          # IMPORTANT: Do not use --collect-all PySide6 (that’s what caused the symlink collision).
          # Let PyInstaller’s built-in hooks include essential Qt plugins automatically.
          pyinstaller Tagger.py \
            --name "SF Tagger" \
            --windowed \
            --noconfirm \
            $ICON_FLAG \
            $EXCLUDE_FLAGS

          echo "Built files in dist/:"
          ls -la "dist"

      - name: Create DMG (prefer create-dmg, fallback to hdiutil)
        run: |
          set -e
          DMG_NAME="SF_Tagger-${{ matrix.runner }}.dmg"

          # Try Homebrew create-dmg
          if command -v brew >/dev/null 2>&1; then
            brew install create-dmg || true
          fi

          if command -v create-dmg >/dev/null 2>&1; then
            echo "Using create-dmg…"
            create-dmg \
              --volname "SF Tagger" \
              --window-pos 200 120 \
              --window-size 600 400 \
              --icon-size 128 \
              --icon "SF Tagger.app" 160 200 \
              --app-drop-link 440 200 \
              "$DMG_NAME" \
              "dist/SF Tagger.app"
          else
            echo "create-dmg not available; using hdiutil…"
            hdiutil create -volname "SF Tagger" \
              -srcfolder "dist/SF Tagger.app" \
              -ov -format UDZO "$DMG_NAME"
          fi
          ls -la

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: SF_Tagger_${{ matrix.runner }}
          path: SF_Tagger-${{ matrix.runner }}.dmg
