name: Build macOS DMG and Release

on:
  push:
    tags:
      - "v*.*.*"          # e.g., v1.0.4
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest  # Apple Silicon runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (pinned)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip
          # App deps
          pip install PySide6==6.9.2 pandas==2.2.2 numpy==1.26.4
          # Build tools
          pip install pyinstaller==6.8.0 pyinstaller-hooks-contrib Pillow

      # Optional: generate assets/icon.icns from assets/icon.png
      - name: Generate .icns (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "assets/icon.png" ] && [ ! -f "assets/icon.icns" ]; then
            mkdir -p icon.iconset
            for s in 16 32 64 128 256 512; do
              sips -z "$s" "$s" assets/icon.png --out "icon.iconset/icon_${s}x${s}.png" >/dev/null
              sips -z "$((s*2))" "$((s*2))" assets/icon.png --out "icon.iconset/icon_${s}x${s}@2x.png" >/dev/null
            done
            iconutil -c icns icon.iconset -o assets/icon.icns
            rm -rf icon.iconset
          fi

      - name: Build .app with PyInstaller (no --onefile)
        env:
          MACOSX_DEPLOYMENT_TARGET: "12.0"
        shell: bash
        run: |
          set -euo pipefail
          rm -rf build dist "SF Tagger.spec" || true

          ICON_FLAG=()
          if [ -f "assets/icon.icns" ]; then
            ICON_FLAG=(--icon "assets/icon.icns")
          fi

          # Exclude heavy Qt modules only (keep core GUI bits)
          EXCLUDES=(
            PySide6.Qt3DAnimation PySide6.Qt3DCore PySide6.Qt3DExtras PySide6.Qt3DInput PySide6.Qt3DLogic PySide6.Qt3DRender
            PySide6.QtWebEngineCore PySide6.QtWebEngineWidgets PySide6.QtWebEngineQuick
            PySide6.QtQuick3D PySide6.QtQuickControls2 PySide6.QtQuickTest
            PySide6.QtCharts PySide6.QtDataVisualization PySide6.QtGraphs PySide6.QtGraphsWidgets
            PySide6.QtHelp PySide6.QtHttpServer PySide6.QtLocation PySide6.QtNfc PySide6.QtPositioning
            PySide6.QtMultimedia PySide6.QtMultimediaWidgets
            PySide6.QtNetworkAuth
            PySide6.QtOpenGL PySide6.QtOpenGLWidgets
            PySide6.QtPdf PySide6.QtPdfWidgets
            PySide6.QtRemoteObjects PySide6.QtScxml PySide6.QtSensors
            PySide6.QtSerialBus PySide6.QtSerialPort PySide6.QtSpatialAudio
            PySide6.QtStateMachine
            PySide6.QtSvg PySide6.QtSvgWidgets
            PySide6.QtTextToSpeech PySide6.QtTest
            PySide6.QtUiTools
            PySide6.QtWebChannel PySide6.QtWebSockets PySide6.QtWebView
            PySide6.QtXml
            PySide6.QtSql
            PySide6.scripts PySide6.scripts.deploy PySide6.scripts.deploy_lib PySide6.scripts.project PySide6.scripts.project_lib
          )
          EXCLUDE_FLAGS=()
          for m in "${EXCLUDES[@]}"; do
            EXCLUDE_FLAGS+=(--exclude-module "$m")
          done

          # Find PySide6 plugin root and add essential plugin folders
          PLUG_BASE="$(python -c 'import PySide6,os; print(os.path.join(PySide6.__path__[0], "Qt", "plugins"))')"
          ADD_DATA_ARGS=()
          for d in platforms imageformats styles tls; do
            if [ -d "${PLUG_BASE}/${d}" ]; then
              ADD_DATA_ARGS+=(--add-data "${PLUG_BASE}/${d}:PySide6/Qt/plugins/${d}")
            fi
          done

          pyinstaller Tagger.py \
            --name "SF Tagger" \
            --windowed \
            --noconfirm \
            "${ICON_FLAG[@]}" \
            "${EXCLUDE_FLAGS[@]}" \
            --collect-data pandas \
            --osx-bundle-identifier "com.northrop.sftagger" \
            --log-level=INFO \
            "${ADD_DATA_ARGS[@]}"

          echo "dist contents:" && ls -la dist
          [ -d "dist/SF Tagger.app" ] || (echo "❌ App bundle missing" && exit 1)

          # Ad-hoc sign to reduce Gatekeeper friction (not notarized)
          codesign --force --deep -s - "dist/SF Tagger.app" || true

      - name: Create DMG
        shell: bash
        run: |
          set -euo pipefail
          brew install create-dmg || true
          DMG="SF_Tagger_macOS.dmg"
          VOL="SF Tagger"
          hdiutil detach "/Volumes/${VOL}" >/dev/null 2>&1 || true
          rm -f "$DMG"
          if command -v create-dmg >/dev/null 2>&1; then
            create-dmg --overwrite \
              --volname "${VOL}" \
              --window-pos 200 120 --window-size 600 400 \
              --icon-size 128 \
              --icon "SF Tagger.app" 160 200 \
              --app-drop-link 440 200 \
              "$DMG" "dist/SF Tagger.app"
          else
            hdiutil create -volname "${VOL}" -srcfolder "dist/SF Tagger.app" -ov -format UDZO "$DMG"
          fi
          ls -la "$DMG"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: SF_Tagger_macOS
          path: SF_Tagger_macOS.dmg
          if-no-files-found: error

      - name: Create / Update GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: SF_Tagger_macOS.dmg
          body: |
            **SF Tagger – macOS (Unsigned)**
            1) Open the DMG  
            2) Drag **SF Tagger.app** → **Applications**  
            3) First launch: right-click **SF Tagger.app** → **Open** → **Open** (one-time Gatekeeper prompt)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
