name: macos-build-dmg-and-release

on:
  push:
    tags: ["v*.*.*"]     # push v1.0.0 etc.
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Release tag (e.g., v1.0.0). Leave blank to just build artifacts."
        required: false
        default: ""

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        runner: [macos-14, macos-13]   # 14 = Apple Silicon, 13 = Intel
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install -U pip
          if [ -f requirements ]; then
            pip install -r requirements
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install PySide6 pandas
          fi
          pip install pyinstaller==6.7.0

      - name: Generate .icns (optional from icon.png)
        shell: bash
        run: |
          if [ -f "assets/icon.png" ]; then
            mkdir -p icon.iconset
            for s in 16 32 64 128 256 512; do
              /usr/bin/sips -z "$s" "$s" assets/icon.png --out "icon.iconset/icon_${s}x${s}.png" >/dev/null
              /usr/bin/sips -z "$((s*2))" "$((s*2))" assets/icon.png --out "icon.iconset/icon_${s}x${s}@2x.png" >/dev/null
            done
            /usr/bin/iconutil -c icns icon.iconset -o assets/icon.icns
            rm -rf icon.iconset
          fi

      - name: Build .app with PyInstaller
        shell: bash
        run: |
          ICON_FLAG=""
          if [ -f "assets/icon.icns" ]; then ICON_FLAG="--icon assets/icon.icns"; fi

          # keep it lean: exclude big Qt modules we don't use
          pyinstaller Tagger.py \
            --name "SF Tagger" \
            --windowed \
            --noconfirm \
            $ICON_FLAG \
            --exclude-module PySide6.QtWebEngineCore \
            --exclude-module PySide6.QtWebEngineWidgets \
            --exclude-module PySide6.QtWebEngineQuick \
            --exclude-module PySide6.Qt3DCore \
            --exclude-module PySide6.Qt3DRender \
            --exclude-module PySide6.Qt3DExtras \
            --exclude-module PySide6.QtCharts \
            --exclude-module PySide6.QtDataVisualization \
            --exclude-module PySide6.QtQuick \
            --exclude-module PySide6.QtQuickWidgets \
            --exclude-module PySide6.QtBluetooth \
            --exclude-module PySide6.QtLocation \
            --exclude-module PySide6.QtNfc \
            --exclude-module PySide6.QtSql \
            --exclude-module PySide6.QtSvg \
            --exclude-module PySide6.QtTextToSpeech

          echo "Built contents of dist/:"
          ls -la dist || true

      - name: Create DMG (hdiutil)
        shell: bash
        run: |
          set -e
          APP_PATH="dist/SF Tagger.app"
          DMG_PATH="dist/SF_Tagger-${{ matrix.runner }}.dmg"
          VOL_NAME="SF Tagger"

          if [ ! -d "$APP_PATH" ]; then
            echo "App not found at $APP_PATH"
            exit 1
          fi

          rm -f "$DMG_PATH"
          hdiutil create -volname "$VOL_NAME" \
            -srcfolder "$APP_PATH" \
            -ov -format UDZO "$DMG_PATH"

          echo "DMG created:"
          ls -la "$DMG_PATH"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: SF_Tagger_${{ matrix.runner }}
          path: dist/SF_Tagger-${{ matrix.runner }}.dmg
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || inputs.tag_name != ''

    steps:
      - name: Download DMG artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: SF_Tagger_*
          merge-multiple: true

      - name: Determine tag
        id: tag
        shell: bash
        run: |
          if [ -n "${{ inputs.tag_name }}" ]; then
            echo "name=${{ inputs.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "name=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          fi

      - name: Checksums
        shell: bash
        run: |
          shasum -a 256 SF_Tagger-*.dmg > SHA256SUMS.txt
          cat SHA256SUMS.txt

      - name: Create/Update Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.name }}
          name: ${{ steps.tag.outputs.name }}
          files: |
            SF_Tagger-*.dmg
            SHA256SUMS.txt
          draft: false
          prerelease: false
          make_latest: true
          generate_release_notes: true
          allowUpdates: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
