name: macos-build-dmg-and-release

on:
  push:
    tags: ["v*.*.*"]        # push v1.0.1 etc. to auto-create/update a Release
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Optional release tag (e.g., v1.0.1). If blank on manual run, artifacts only."
        required: false
        default: ""

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        runner: [macos-14, macos-13]   # 14: Apple Silicon (arm64), 13: Intel (x86_64)
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip
          if [ -f requirements ]; then
            pip install -r requirements
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install PySide6 pandas
          fi
          # Pin a known-good PyInstaller + contrib hooks set
          pip install "pyinstaller==6.7.0" "pyinstaller-hooks-contrib>=2024.7"

      # Optional: auto-generate .icns if you only have assets/icon.png
      - name: Generate .icns (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "assets/icon.png" ] && [ ! -f "assets/icon.icns" ]; then
            mkdir -p icon.iconset
            for s in 16 32 64 128 256 512; do
              /usr/bin/sips -z "$s" "$s" assets/icon.png --out "icon.iconset/icon_${s}x${s}.png" >/dev/null
              /usr/bin/sips -z "$((s*2))" "$((s*2))" assets/icon.png --out "icon.iconset/icon_${s}x${s}@2x.png" >/dev/null
            done
            /usr/bin/iconutil -c icns icon.iconset -o assets/icon.icns
            rm -rf icon.iconset
          fi

      - name: Build .app with PyInstaller (lean + explicit Qt plugins)
        env:
          MACOSX_DEPLOYMENT_TARGET: "12.0"   # good baseline (Monterey+) incl. Sequoia
        shell: bash
        run: |
          set -euo pipefail
          # Clean outputs/spec so hooks don't collide across runs
          rm -rf build dist "SF Tagger.spec" || true

          ICON_FLAG=""
          [ -f "assets/icon.icns" ] && ICON_FLAG="--icon assets/icon.icns"

          # Exclude optional Qt modules (prevents Qt3D symlink collisions & huge bundles)
          EXCLUDES=(
            PySide6.Qt3DAnimation PySide6.Qt3DCore PySide6.Qt3DExtras PySide6.Qt3DInput PySide6.Qt3DLogic PySide6.Qt3DRender
            PySide6.QtWebEngineCore PySide6.QtWebEngineWidgets PySide6.QtWebEngineQuick
            PySide6.QtQuick PySide6.QtQuickWidgets PySide6.QtQuick3D PySide6.QtQuickControls2 PySide6.QtQuickTest
            PySide6.QtQml
            PySide6.QtBluetooth PySide6.QtCharts PySide6.QtDataVisualization PySide6.QtGraphs PySide6.QtGraphsWidgets
            PySide6.QtHelp PySide6.QtHttpServer PySide6.QtLocation PySide6.QtNfc PySide6.QtPositioning
            PySide6.QtMultimedia PySide6.QtMultimediaWidgets
            PySide6.QtNetworkAuth
            PySide6.QtOpenGL PySide6.QtOpenGLWidgets
            PySide6.QtPdf PySide6.QtPdfWidgets
            PySide6.QtRemoteObjects PySide6.QtScxml PySide6.QtSensors
            PySide6.QtSerialBus PySide6.QtSerialPort PySide6.QtSpatialAudio
            PySide6.QtStateMachine
            PySide6.QtSvg PySide6.QtSvgWidgets
            PySide6.QtTextToSpeech PySide6.QtTest
            PySide6.QtUiTools
            PySide6.QtWebChannel PySide6.QtWebSockets PySide6.QtWebView
            PySide6.QtXml
            PySide6.QtSql
            PySide6.scripts PySide6.scripts.deploy PySide6.scripts.deploy_lib PySide6.scripts.project PySide6.scripts.project_lib
            PySide6.support PySide6.support.deprecated PySide6.support.generate_pyi
            jinja2
          )
          EXCLUDE_FLAGS=""
          for m in "${EXCLUDES[@]}"; do
            EXCLUDE_FLAGS="$EXCLUDE_FLAGS --exclude-module $m"
          done

          # Build with verbose logs; collect only the Qt plugins we need for a GUI app
          set +e
          pyinstaller Tagger.py \
            --name "SF Tagger" \
            --windowed \
            --noconfirm \
            --log-level=DEBUG \
            $ICON_FLAG \
            $EXCLUDE_FLAGS \
            --collect-qt-plugins=platforms,imageformats,styles,tls \
            --collect-data pandas
          STATUS=$?
          set -e

          echo "::group::List dist/"
          ls -la dist || true
          echo "::endgroup::"

          echo "::group::List build/"
          ls -la build || true
          echo "::endgroup::"

          # If it failed, print warnings and the tail of build logs to help diagnose
          if [ $STATUS -ne 0 ]; then
            echo "PyInstaller failed with status $STATUS"
            echo "::group::PyInstaller warnings"
            find build -type f -name 'warn-*.txt' -maxdepth 2 -print -exec sed -n '1,200p' {} \; || true
            echo "::endgroup::"
            echo "::group::Spec & analysis logs (tail)"
            find build -type f -name '*.log' -maxdepth 2 -print -exec tail -n 200 {} \; || true
            echo "::endgroup::"
            exit $STATUS
          fi

          echo "Built app:"
          ls -la "dist/SF Tagger.app"

      - name: Create DMG
        shell: bash
        run: |
          set -euo pipefail
          brew install create-dmg || true

          ARCH_LABEL="${{ matrix.runner }}"   # macos-14 or macos-13
          DMG="dist/SF_Tagger-${ARCH_LABEL}.dmg"
          VOL="SF Tagger"

          # Ensure no stale mounts / stale file
          hdiutil detach "/Volumes/${VOL}" >/dev/null 2>&1 || true
          rm -f "$DMG"

          if command -v create-dmg >/dev/null 2>&1; then
            create-dmg --overwrite \
              --volname "${VOL}" \
              --window-pos 200 120 --window-size 600 400 \
              --icon-size 128 \
              --icon "SF Tagger.app" 160 200 \
              --app-drop-link 440 200 \
              "$DMG" "dist/SF Tagger.app"
          else
            hdiutil create -volname "${VOL}" -srcfolder "dist/SF Tagger.app" -ov -format UDZO "$DMG"
          fi

          echo "DMG created:"
          ls -la "$DMG"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: SF_Tagger_${{ matrix.runner }}
          path: dist/SF_Tagger-${{ matrix.runner }}.dmg
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/v') || inputs.tag_name != ''
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all DMG artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: SF_Tagger_*
          merge-multiple: true

      - name: Determine tag for release
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ inputs.tag_name }}" ]; then
            TAG="${{ inputs.tag_name }}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="v0.0.${GITHUB_RUN_NUMBER}-dev"
          fi
          echo "name=$TAG" >> "$GITHUB_OUTPUT"
          echo "Using tag: $TAG"

      - name: Rename assets for clarity
        shell: bash
        run: |
          set -euo pipefail
          [ -f SF_Tagger-macos-14.dmg ] && mv -f SF_Tagger-macos-14.dmg SF_Tagger-mac-AppleSilicon.dmg || true
          [ -f SF_Tagger-macos-13.dmg ] && mv -f SF_Tagger-macos-13.dmg SF_Tagger-mac-Intel.dmg || true
          ls -la

      - name: Checksums
        shell: bash
        run: |
          set -euo pipefail
          shasum -a 256 SF_Tagger-*.dmg > SHA256SUMS.txt
          cat SHA256SUMS.txt

      - name: Create / Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.name }}
          name: SF Tagger ${{ steps.tag.outputs.name }}
          body: |
            **SF Tagger – Bulk Salesforce Record Tagger**

            macOS installers:
            - **SF_Tagger-mac-AppleSilicon.dmg** (M1/M2/M3)
            - **SF_Tagger-mac-Intel.dmg** (Intel Macs)

            Install:
            1) Open the DMG
            2) Drag **SF Tagger.app** → Applications
            3) First launch: right-click → **Open** → **Open** (unsigned, one-time Gatekeeper prompt)
          files: |
            SF_Tagger-mac-AppleSilicon.dmg
            SF_Tagger-mac-Intel.dmg
            SHA256SUMS.txt
          draft: false
          prerelease: false
          make_latest: true
          generate_release_notes: true
          allowUpdates: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
