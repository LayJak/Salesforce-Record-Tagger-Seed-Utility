name: macos-build-dmg-unsigned

on:
  push:
    tags: ["v*.*.*"]     # e.g. v1.0.0
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        runner: [macos-14, macos-13]   # 14=arm64, 13=x86_64
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          if [ -f requirements ]; then
            pip install -r requirements
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install PySide6 pandas
          fi
          pip install pyinstaller

      # Optional: build a .icns from PNG if you have assets/icon.png
      - name: Generate .icns (optional)
        run: |
          if [ -f "assets/icon.png" ]; then
            mkdir -p icon.iconset
            for s in 16 32 64 128 256 512; do
              /usr/bin/sips -z $s $s assets/icon.png --out icon.iconset/icon_${s}x${s}.png > /dev/null
              /usr/bin/sips -z $((s*2)) $((s*2)) assets/icon.png --out icon.iconset/icon_${s}x${s}@2x.png > /dev/null
            done
            /usr/bin/iconutil -c icns icon.iconset -o assets/icon.icns
            rm -rf icon.iconset
          fi

      - name: Build .app with PyInstaller
        run: |
          ICON_FLAG=""
          if [ -f "assets/icon.icns" ]; then ICON_FLAG="--icon assets/icon.icns"; fi
          # For PySide6, prefer one-folder app bundle; include Qt plugins & pandas data
          pyinstaller Tagger.py \
            --name "SF Tagger" \
            --windowed \
            $ICON_FLAG \
            --noconfirm \
            --collect-all PySide6 \
            --collect-data pandas
          ls -la "dist"

      - name: Create DMG (prefer create-dmg, fallback to hdiutil)
        run: |
          set -e
          DMG_NAME="SF_Tagger-${{ matrix.runner }}.dmg"

          # Try Homebrew create-dmg
          if command -v brew >/dev/null 2>&1; then
            brew install create-dmg || true
          fi

          if command -v create-dmg >/dev/null 2>&1; then
            echo "Using create-dmg…"
            create-dmg \
              --volname "SF Tagger" \
              --window-pos 200 120 \
              --window-size 600 400 \
              --icon-size 128 \
              --icon "SF Tagger.app" 160 200 \
              --app-drop-link 440 200 \
              "$DMG_NAME" \
              "dist/SF Tagger.app"
          else
            echo "create-dmg not available; using hdiutil…"
            hdiutil create -volname "SF Tagger" \
              -srcfolder "dist/SF Tagger.app" \
              -ov -format UDZO "$DMG_NAME"
          fi
          ls -la

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: SF_Tagger_${{ matrix.runner }}
          path: SF_Tagger-${{ matrix.runner }}.dmg
