name: macos-build-dmg-and-release

on:
  push:
    tags: ["v*.*.*"]        # push v1.0.0 etc. to auto-create/update a Release
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Optional release tag (e.g., v1.0.1). If blank on manual run, artifacts only."
        required: false
        default: ""

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        runner: [macos-14, macos-13]   # macos-14 = Apple Silicon (arm64), macos-13 = Intel (x86_64)
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          set -e
          python -m pip install -U pip
          if [ -f requirements ]; then
            pip install -r requirements
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install PySide6 pandas
          fi
          # Pin a PyInstaller known-good for PySide6 on macOS
          pip install "pyinstaller==6.7.0" "pyinstaller-hooks-contrib>=2024.7"

      # Optional: auto-generate .icns if you only have assets/icon.png
      - name: Generate .icns (optional)
        shell: bash
        run: |
          if [ -f "assets/icon.png" ] && [ ! -f "assets/icon.icns" ]; then
            mkdir -p icon.iconset
            for s in 16 32 64 128 256 512; do
              /usr/bin/sips -z "$s" "$s" assets/icon.png --out "icon.iconset/icon_${s}x${s}.png" >/dev/null
              /usr/bin/sips -z "$((s*2))" "$((s*2))" assets/icon.png --out "icon.iconset/icon_${s}x${s}@2x.png" >/dev/null
            done
            /usr/bin/iconutil -c icns icon.iconset -o assets/icon.icns
            rm -rf icon.iconset
          fi

      - name: Build .app with PyInstaller (per-arch)
        env:
          MACOSX_DEPLOYMENT_TARGET: "12.0"   # runs fine on Sequoia and back to Monterey
        shell: bash
        run: |
          set -e
          ICON_FLAG=""
          [ -f "assets/icon.icns" ] && ICON_FLAG="--icon assets/icon.icns"

          # Bundle ALL Qt/PySide6 components to avoid “Qt platform plugin cocoa” issues
          pyinstaller Tagger.py \
            --name "SF Tagger" \
            --windowed \
            --noconfirm \
            $ICON_FLAG \
            --collect-all PySide6 \
            --collect-data pandas

          echo "Built app:"
          ls -la "dist/SF Tagger.app"

      - name: Create DMG
        shell: bash
        run: |
          set -e
          brew install create-dmg || true

          ARCH_LABEL="${{ matrix.runner }}"   # macos-14 or macos-13
          DMG="dist/SF_Tagger-${ARCH_LABEL}.dmg"
          VOL="SF Tagger"

          # Ensure no stale mounts / stale file
          hdiutil detach "/Volumes/${VOL}" >/dev/null 2>&1 || true
          rm -f "$DMG"

          if command -v create-dmg >/dev/null 2>&1; then
            create-dmg --overwrite \
              --volname "${VOL}" \
              --window-pos 200 120 --window-size 600 400 \
              --icon-size 128 \
              --icon "SF Tagger.app" 160 200 \
              --app-drop-link 440 200 \
              "$DMG" "dist/SF Tagger.app"
          else
            hdiutil create -volname "${VOL}" -srcfolder "dist/SF Tagger.app" -ov -format UDZO "$DMG"
          fi

          echo "DMG created:"
          ls -la "$DMG"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: SF_Tagger_${{ matrix.runner }}
          path: dist/SF_Tagger-${{ matrix.runner }}.dmg
          if-no-files-found: error

  release:
    # run when: a) a tag is pushed OR b) manual run with a tag_name provided
    if: startsWith(github.ref, 'refs/tags/v') || inputs.tag_name != ''
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all DMG artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: SF_Tagger_*
          merge-multiple: true

      - name: Determine tag for release
        id: tag
        shell: bash
        run: |
          if [ -n "${{ inputs.tag_name }}" ]; then
            TAG="${{ inputs.tag_name }}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="v0.0.${GITHUB_RUN_NUMBER}-dev"
          fi
          echo "name=$TAG" >> "$GITHUB_OUTPUT"
          echo "Using tag: $TAG"

      - name: Rename assets for clarity
        shell: bash
        run: |
          # macos-14 = Apple Silicon, macos-13 = Intel
          [ -f SF_Tagger-macos-14.dmg ] && mv -f SF_Tagger-macos-14.dmg SF_Tagger-mac-AppleSilicon.dmg || true
          [ -f SF_Tagger-macos-13.dmg ] && mv -f SF_Tagger-macos-13.dmg SF_Tagger-mac-Intel.dmg || true
          ls -la

      - name: Checksums
        shell: bash
        run: |
          shasum -a 256 SF_Tagger-*.dmg > SHA256SUMS.txt
          cat SHA256SUMS.txt

      - name: Create / Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.name }}
          name: SF Tagger ${{ steps.tag.outputs.name }}
          body: |
            **SF Tagger – Bulk Salesforce Record Tagger**

            - Two macOS builds:
              - **SF_Tagger-mac-AppleSilicon.dmg** (M1/M2/M3)
              - **SF_Tagger-mac-Intel.dmg** (Intel Macs)
            - App is **unsigned** (standard Gatekeeper prompt on first run).
            - Install: open DMG → drag **SF Tagger.app** to Applications → right-click **Open** once.
          files: |
            SF_Tagger-mac-AppleSilicon.dmg
            SF_Tagger-mac-Intel.dmg
            SHA256SUMS.txt
          draft: false
          prerelease: false
          make_latest: true
          generate_release_notes: true
          allowUpdates: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
