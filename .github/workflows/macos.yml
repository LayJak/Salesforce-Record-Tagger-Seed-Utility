name: macos-build-dmg-unsigned

on:
  push:
    tags: ["v*.*.*"]   # e.g. v1.0.0
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        runner: [macos-14, macos-13]   # 14 = Apple Silicon (arm64), 13 = Intel (x86_64)
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          if [ -f requirements ]; then
            pip install -r requirements
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install PySide6 pandas
          fi
          # Pin a known-good PyInstaller to reduce surprises
          pip install "pyinstaller==6.7.0"

      # Optional: build a .icns from PNG if you have assets/icon.png
      - name: Generate .icns (optional)
        run: |
          if [ -f "assets/icon.png" ]; then
            mkdir -p icon.iconset
            for s in 16 32 64 128 256 512; do
              /usr/bin/sips -z $s $s assets/icon.png --out icon.iconset/icon_${s}x${s}.png > /dev/null
              /usr/bin/sips -z $((s*2)) $((s*2)) assets/icon.png --out icon.iconset/icon_${s}x${s}@2x.png > /dev/null
            done
            /usr/bin/iconutil -c icns icon.iconset -o assets/icon.icns
            rm -rf icon.iconset
          fi

      - name: Write minimal PyInstaller spec (Tree copy of essential Qt plugins)
        run: |
          cat > sftagger.spec << 'PYI'
          # -*- mode: python ; coding: utf-8 -*-
          import os
          from PyInstaller.utils.hooks import collect_data_files, get_package_paths, collect_dynamic_libs
          from PyInstaller.building.build_main import Analysis, PYZ, EXE, COLLECT, BUNDLE
          from PyInstaller.building.datastruct import Tree

          APP_NAME = "SF Tagger"
          SCRIPT = "Tagger.py"

          # Exclude heavy/unused PySide6 modules (prevents Qt3D/WebEngine collisions & shrinks app)
          EXCLUDES = [
              "PySide6.Qt3DAnimation","PySide6.Qt3DCore","PySide6.Qt3DRender","PySide6.Qt3DExtras","PySide6.Qt3DInput","PySide6.Qt3DLogic",
              "PySide6.QtWebEngineCore","PySide6.QtWebEngineWidgets","PySide6.QtWebEngineQuick",
              "PySide6.QtQuick","PySide6.QtQuickWidgets","PySide6.QtQuick3D","PySide6.QtQuickControls2","PySide6.QtQuickTest",
              "PySide6.QtBluetooth","PySide6.QtCharts","PySide6.QtDataVisualization","PySide6.QtGraphs","PySide6.QtGraphsWidgets",
              "PySide6.QtHelp","PySide6.QtHttpServer","PySide6.QtLocation","PySide6.QtNfc","PySide6.QtPositioning",
              "PySide6.QtPdf","PySide6.QtPdfWidgets","PySide6.QtRemoteObjects","PySide6.QtScxml","PySide6.QtSensors",
              "PySide6.QtSerialBus","PySide6.QtSerialPort","PySide6.QtSpatialAudio","PySide6.QtStateMachine",
              "PySide6.QtSvg","PySide6.QtSvgWidgets","PySide6.QtTextToSpeech","PySide6.QtUiTools",
              "PySide6.QtWebSockets","PySide6.QtWebView",
              "PySide6.scripts","PySide6.scripts.deploy","PySide6.scripts.deploy_lib","PySide6.scripts.project","PySide6.scripts.project_lib",
              "PySide6.QtDBus","PySide6.QtSql",
              "jinja2",
          ]

          a = Analysis(
              [SCRIPT],
              pathex=[],
              binaries=[],
              datas=[],
              hiddenimports=[],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=EXCLUDES,
              noarchive=False,
          )

          # Include pandas data
          a.datas += collect_data_files("pandas")

          # Only include essential Qt plugins via Tree copy
          pkg_base, pkg_dir = get_package_paths("PySide6")
          qt_plugins_dir = os.path.join(pkg_dir, "Qt", "plugins")
          for sub in ["platforms", "styles", "imageformats", "printsupport"]:
              src = os.path.join(qt_plugins_dir, sub)
              if os.path.isdir(src):
                  a.datas += Tree(src, prefix=os.path.join("PySide6", "Qt", "plugins", sub))

          # Ensure PySide6 shared libs are present
          a.binaries += collect_dynamic_libs("PySide6")

          pyz = PYZ(a.pure, a.zipped_data, cipher=None)

          # IMPORTANT: exclude_binaries=True so binaries/datas go only into COLLECT
          exe = EXE(
              pyz,
              a.scripts,
              [],
              exclude_binaries=True,
              name=APP_NAME,
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=False,
              upx_exclude=[],
              runtime_tmpdir=None,
              console=False,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
          )

          app = BUNDLE(
              exe,
              name=f"{APP_NAME}.app",
              icon="assets/icon.icns" if os.path.exists("assets/icon.icns") else None,
              bundle_identifier="com.northrop.sftagger",
              info_plist={"NSHighResolutionCapable": True},
          )

          coll = COLLECT(
              app,
              a.binaries,
              a.zipfiles,
              a.datas,
              strip=False,
              upx=False,
              upx_exclude=[],
              name=APP_NAME,
          )
          PYI

      - name: Build .app with PyInstaller (using spec)
        run: |
          pyinstaller --clean sftagger.spec
          echo "Built files in dist/:"
          ls -la "dist"

      - name: Create DMG (prefer create-dmg, fallback to hdiutil)
        run: |
          set -e
          DMG_NAME="SF_Tagger-${{ matrix.runner }}.dmg"

          # Try Homebrew create-dmg
          if command -v brew >/dev/null 2>&1; then
            brew install create-dmg || true
          fi

          if command -v create-dmg >/dev/null 2>&1; then
            echo "Using create-dmg…"
            create-dmg \
              --volname "SF Tagger" \
              --window-pos 200 120 \
              --window-size 600 400 \
              --icon-size 128 \
              --icon "SF Tagger.app" 160 200 \
              --app-drop-link 440 200 \
              "$DMG_NAME" \
              "dist/SF Tagger.app"
          else
            echo "create-dmg not available; using hdiutil…"
            hdiutil create -volname "SF Tagger" \
              -srcfolder "dist/SF Tagger.app" \
              -ov -format UDZO "$DMG_NAME"
          fi
          ls -la

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: SF_Tagger_${{ matrix.runner }}
          path: SF_Tagger-${{ matrix.runner }}.dmg
